using System;
using System.Linq;
using System.Web.UI.WebControls;
using umbraco.interfaces;

namespace UmbraCodeFirst.MacroPropertyTypes
{
    /// <summary>
    /// <remarks>
    /// <para>In order for the MacroPropertyType to be useable by Umbraco, it needs to be registered in the Database table cmsMacroPropertyType.</para>
    /// <para>id: IDENTITY, autogenerated.</para>
    /// <para>macroPropertyAlias: The name to show in the Umbraco Macro Parameter UI, i.e. [MacroPropertyType]</para>
    /// <para>macroPropertyTypeRenderAssembly: The name of the assembly, i.e. CodeLibrary.Umbraco4</para>
    /// <para>macroPropertyTypeRenderType: Fully qualified Namespace and type name of the property, except for the assembly part (if the assembly name is part of the namespace hierarchy), i.e. [UmbraCodeFirst.]MacroPropertyTypes.[MacroPropertyType]</para>
    /// <para>macroPropertyTypeBaseType: The base type of the macro property, in this case the type of the "Value" member. i.e. String</para>
    /// </remarks>
    /// </summary>
    public abstract class MacroPropertyType : ListBox, IMacroGuiRendering
    {
        protected string UnderlyingValue = String.Empty;

        public virtual bool ShowCaption
        {
            get { return true; }
        }

        public virtual bool Multiple { get; set; }

        public virtual string Value
        {
            get
            {
                var retVal = (base.Items.Cast<ListItem>().Where(item => item.Selected)).Aggregate(String.Empty, (current, item) => current + (item.Value + ","));

                if (retVal != String.Empty)
                    retVal = retVal.Substring(0, retVal.Length - 1);

                return retVal;
            }
            set { UnderlyingValue = value; }
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);

            CssClass = "guiInputTextStandard";

            if (Multiple)
            {
                SelectionMode = ListSelectionMode.Multiple;
                Rows = 5;
                Multiple = true;
            }
            else
            {
                Rows = 1;
                Items.Add(new ListItem(String.Empty, String.Empty));
                SelectionMode = ListSelectionMode.Single;
            }
            BeforeRenderItems();
            RenderItems();
        }

        protected virtual void BeforeRenderItems(){}

        protected abstract void RenderItems();
    }
}