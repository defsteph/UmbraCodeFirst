using System;
using System.Collections.Generic;
using System.Linq;
using UmbraCodeFirst.MacroPropertyTypes;
using umbraco.BusinessLogic.Utils;
using umbraco.DataLayer;

namespace UmbraCodeFirst.Synchronization
{
    internal class MacroPropertyTypeSynchronizer : ISynchronizer
    {

        #region Singleton
        private MacroPropertyTypeSynchronizer()
        {
        }

        private static MacroPropertyTypeSynchronizer _instance;

        /// <summary>
        /// Singleton instance of the MacroPropertyTypeSynchronizer
        /// </summary>
        public static MacroPropertyTypeSynchronizer Instance
        {
            get { return _instance ?? (_instance = new MacroPropertyTypeSynchronizer()); }
        }

        #endregion

        public int ExecutionOrder
        {
            get { return 3; }
        }

        private static ISqlHelper SqlHelper
        {
            get { return umbraco.BusinessLogic.Application.SqlHelper; }
        }

        private bool _macroPropertyTypesInstalled;

        public void Synchronize()
        {
            if (_macroPropertyTypesInstalled)
                return;

            var inherentMacroPropertyTypes = TypeFinder.FindClassesOfType<MacroPropertyType>(true, true);
            var installedMacroPropertyTypeAliases = GetInstalledMacroPropertyTypeAliases();

            foreach (var macroPropertyType in inherentMacroPropertyTypes.Where(macroPropertyType => !installedMacroPropertyTypeAliases.Contains(macroPropertyType.Name)))
            {
                InstallMacroPropertyType(macroPropertyType);
            }
            _macroPropertyTypesInstalled = true;
        }

        private static IEnumerable<string> GetInstalledMacroPropertyTypeAliases()
        {
            var macroAliases = new List<string>();
            using (var reader = SqlHelper.ExecuteReader("SELECT macroPropertyTypeAlias FROM cmsMacroPropertyType"))
            {
                while (reader.Read())
                {
                    macroAliases.Add(reader.GetString("macroPropertyTypeAlias"));
                }
            }
            return macroAliases.ToArray();
        }

        /// <summary>
        /// <remarks>
        /// <para>In order for the MacroPropertyType to be useable by Umbraco, it needs to be registered in the Database table cmsMacroPropertyType.</para>
        /// <para>id: IDENTITY, autogenerated.</para>
        /// <para>macroPropertyAlias: The name to show in the Umbraco Macro Parameter UI, i.e. [MacroPropertyType]</para>
        /// <para>macroPropertyTypeRenderAssembly: The name of the assembly, i.e. CodeLibrary.Umbraco4</para>
        /// <para>macroPropertyTypeRenderType: Fully qualified Namespace and type name of the property, except for the assembly part (if the assembly name is part of the namespace hierarchy), i.e. [UmbraCodeFirst.]MacroPropertyTypes.[MacroPropertyType]</para>
        /// <para>macroPropertyTypeBaseType: The base type of the macro property, in this case the type of the "Value" member. i.e. String</para>
        /// </remarks>
        /// </summary>
        private static void InstallMacroPropertyType(Type macroPropertyType)
        {
            var alias = macroPropertyType.Name;
            var assembly = macroPropertyType.Module.Name.Replace(".DLL", String.Empty);
            var type = String.Concat((macroPropertyType.Namespace != null) ? macroPropertyType.Namespace.Replace(assembly, String.Empty).TrimStart(new[] { '.' }) : String.Empty, ".", alias);
            var baseType = macroPropertyType.GetProperty("Value").PropertyType.Name;

            SqlHelper.ExecuteNonQuery(
                "INSERT INTO cmsMacroPropertyType (macroPropertyTypeAlias, macroPropertyTypeRenderAssembly, macroPropertyTypeRenderType, macroPropertyTypeBaseType) VALUES (@alias, @assembly, @type, @baseType)",
                SqlHelper.CreateParameter("@alias", alias),
                SqlHelper.CreateParameter("@assembly", assembly),
                SqlHelper.CreateParameter("@type", type),
                SqlHelper.CreateParameter("@baseType", baseType)
                );
        }
    }
}
